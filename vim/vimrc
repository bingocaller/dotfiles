" -------
" Options
" -------
" Show relative line numbers in gutter
set number
set relativenumber

" Don't wrap lines by default
set nowrap

" Stop folding stuff!
set nofoldenable

" Indentation
set expandtab
set shiftwidth=4
set softtabstop=4

" Open new split panes to right and bottom, which feels more natural
set splitbelow
set splitright

" Some servers have issues with backup files.
" See https://github.com/neoclide/coc.nvim/issues/649
set nobackup
set nowritebackup

" We don't want to deal with this in .gitignore
set noswapfile

" Show partial command keys in the status line
set showcmd

" Automatically :write before running commands
set autowrite

" Ignore case unless capital letters are used
set ignorecase smartcase

" assume the /g flag on :s substitutions to replace all matches in a line
set gdefault 

" Disable modelines as a security precaution
set modelines=0
set nomodeline

" Use ripgrep instead of grep
set grepprg=rg

" Always use Python 3
set pyxversion=3

" ----------
" Remappings
" ----------

" Zero moves to first character on line instead of beginning of line
nmap 0 ^
" Move up and down by visible lines if current line is wrapped
nmap j gj
nmap k gk

" Save from insert mode
imap <C-s> <esc>:w<cr>

" Expand Emmet abbreviation
imap <S-tab> <plug>(emmet-expand-abbr)

" ------------------
" Leader mappings (disable in VSCod(e|ium)
" ------------------

if !exists('g:vscode')
    " <leader> = <Space>
    let mapleader = " "

    " Split edit .vimrc
    nmap <leader>vr :sp $MYVIMRC<cr>
    " Source (reload) .vimrc
    nmap <leader>so :source $MYVIMRC<cr>
    " Install Plugins
    nmap <leader>pi :PlugInstall<cr>
    " Remove highlight, e.g. after search
    nmap <leader>hh :nohlsearch<cr>
    " Update tag (via Emmet)
    nmap <leader>u <plug>(emmet-update-tag)
    " Switch between the last two files
    nnoremap <leader><leader> <C-^>

    " RENAME CURRENT FILE (thanks Gary Bernhardt and Ben Orenstein)
    function! RenameFile()
        let old_name = expand('%')
        let new_name = input('New file name: ', expand('%'), 'file')
        if new_name != '' && new_name != old_name
            exec ':saveas ' . new_name
            exec ':silent !rm ' . old_name
            redraw!
        endif
    endfunction
    map <leader>n :call RenameFile()<cr>
endif

" Autocommands
" Bind `q` to close the buffer for help files
autocmd Filetype help nnoremap <buffer> q :q<CR>
" Force Vim to rescan entire buffer when highlighting large JSX/TSX files.
" Disable when leaving.
autocmd BufEnter *.{js,jsx,ts,tsx} :syntax sync fromstart
autocmd BufLeave *.{js,jsx,ts,tsx} :syntax sync clear

" Disable concealing in Markdown files, re-enable when leaving
autocmd BufEnter *.{md,mdx} :set conceallevel=0
autocmd BufLeave *.{md,mdx} :set conceallevel=2
"
" Enable wrapping in Markdown files, disable when leaving
autocmd BufEnter *.{md,mdx} :set wrap
autocmd BufLeave *.{md,mdx} :set nowrap

" -------
" Plugins
" -------

if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')
" Utilities & niceness
Plug 'airblade/vim-gitgutter'
Plug 'christoomey/vim-sort-motion'
Plug 'inkarkat/vim-ReplaceWithRegister'
Plug 'machakann/vim-highlightedyank'
Plug 'tommcdo/vim-exchange'
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-sleuth'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-vinegar'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'yggdroot/indentline'
" Completions
Plug 'mattn/emmet-vim'
" FZF
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
" Conquer of Completion
Plug 'neoclide/coc.nvim', {'branch': 'release'}
" Focus mode
Plug 'junegunn/goyo.vim'
" Syntax highlighting
Plug 'sheerun/vim-polyglot'
" Flow
Plug 'flowtype/vim-flow'
" styled-components
Plug 'styled-components/vim-styled-components', { 'branch': 'main' }
" Jinja / Nunjucks
" Plug 'Glench/Vim-Jinja2-Syntax'
" Fish
Plug 'dag/vim-fish'
" Color scheme
Plug 'haishanh/night-owl.vim'

call plug#end()

" ---------------
" Plugin settings
" ---------------

"  Netrw

" Make the default listing style "tree"
let g:netrw_liststyle = 3

" Airline
let g:airline_theme='night_owl'

" pangloss/vim-javascript - Installed by vim-polyglot
let g:javascript_plugin_jsdoc = 1
let g:javascript_plugin_flow = 1

" maxmellon/vim-jsx-pretty - Installed by vim-polyglot
" We let peitalin/vim-jsx-typescript (installed by vim-polyglot)
" handle TSX hightligthing
let g:vim_jsx_pretty_disable_tsx = 1

" elzr/vim-json - Installed by vim-polyglot
" Don't conceal quotes in JSON
let g:vim_json_syntax_conceal = 0

" haishanh/night-owl.vim
if (has("termguicolors"))
    set termguicolors
endif
" set Vim-specific sequences for RGB colors
let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
colorscheme night-owl
" Add better Tabline colours
hi TabLineFill guifg=#02233e guibg=fg
hi TabLine guibg=#023055 guifg=#4e6e88
hi TabLineSel guibg=bg guifg=fg

" machakann/vim-highlightedyank
if !exists('##TextYankPost')
    map y <Plug>(highlightedyank)
endif

" yggdroot/indentline
let g:indentLine_char = "â”‚"

" ---
" FZF
" ---

map <C-p> :Files<cr>
map <C-b> :Buffers<cr>
map <C-h> :History<cr>
map <a-p> :Commands<cr>
map <a-w> :Windows<cr>

" Don't use window layout
let g:fzf_layout = { 'down': '40%' }

" [Buffers] Jump to the existing window if possible
let g:fzf_buffers_jump = 1

" Potentially disable some plugins
" Skip vim-sensible in NeoVim
if has('nvim')
    let g:loaded_sensible=0
endif

" Skip stuff handled by VSCod(e|ium)
if exists('g:vscode')
    let g:loaded_airline=0
    let g:loaded_airline_themes=0
    let g:loaded_commentary=0
    let g:loaded_emmet_vim=0
    let g:loaded_flow=0
    let g:loaded_fzf=0
    let g:loaded_fzf_vim=0
    let g:loaded_gitgutter=0
    let g:loaded_netrw=0
    let g:loaded_netrwPlugin=0
    " let g:loaded_python3_provider=0
    " let g:loaded_python_provider=0
    " let g:loaded_ruby_provider=0
endif

